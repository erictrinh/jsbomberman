// Generated by CoffeeScript 1.3.1
var Player,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Player = (function() {

  Player.name = 'Player';

  function Player(pid, pos_x, pos_y, cont_up, cont_down, cont_left, cont_right, cont_drop) {
    this.move_right = __bind(this.move_right, this);

    this.move_left = __bind(this.move_left, this);

    this.move_down = __bind(this.move_down, this);

    this.move_up = __bind(this.move_up, this);

    this.can_go_up = __bind(this.can_go_up, this);

    this.can_go_down = __bind(this.can_go_down, this);

    this.can_go_left = __bind(this.can_go_left, this);

    this.can_go_right = __bind(this.can_go_right, this);

    this.get_grid_coords = __bind(this.get_grid_coords, this);

    this.on_snap_y = __bind(this.on_snap_y, this);

    this.on_snap_x = __bind(this.on_snap_x, this);
    this.id = pid;
    this.position = {
      x: pos_x,
      y: pos_y
    };
    this.facing = 'down';
    this.speed = 1;
    this.bomb_supply = {
      max_number: 1,
      number: 1,
      range: 1
    };
    this.controls = {
      up: cont_up,
      down: cont_down,
      left: cont_left,
      right: cont_right,
      drop: cont_drop
    };
    this.up = false;
    this.down = false;
    this.right = false;
    this.left = false;
    this.dead = false;
    this.movement = movement_logic(this);
  }

  Player.prototype.on_snap_x = function() {
    var x, x_distance;
    x = this.position.x;
    x_distance = (x - 25) % 50;
    if (x_distance > 0) {
      if (x_distance <= 25) {
        return x - x_distance;
      } else {
        return x + (50 - x_distance);
      }
    } else {
      return x;
    }
  };

  Player.prototype.on_snap_y = function() {
    var y, y_distance;
    y = this.position.y;
    y_distance = (y - 25) % 50;
    if (y_distance > 0) {
      if (y_distance <= 25) {
        return y - y_distance;
      } else {
        return y + (50 - y_distance);
      }
    } else {
      return y;
    }
  };

  Player.prototype.get_grid_coords = function() {
    var c, r, x, y;
    x = this.on_snap_x();
    y = this.on_snap_y();
    c = (x - 25) / 50;
    r = (y - 25) / 50;
    return {
      row: r,
      col: c
    };
  };

  Player.prototype.can_go_right = function() {
    var coords;
    coords = this.get_grid_coords();
    if (this.position.x === 425) {
      return false;
    } else if (coords.col === 8) {
      return true;
    }
    if (objects[coords.row][coords.col + 1].walkable) {
      return true;
    } else if (this.position.x !== this.on_snap_x()) {
      return true;
    } else {
      return false;
    }
  };

  Player.prototype.can_go_left = function() {
    var coords;
    coords = this.get_grid_coords();
    if (this.position.x === 25) {
      return false;
    } else if (coords.col === 0) {
      return true;
    }
    if (objects[coords.row][coords.col - 1].walkable) {
      return true;
    } else if (this.position.x !== this.on_snap_x()) {
      return true;
    } else {
      return false;
    }
  };

  Player.prototype.can_go_down = function() {
    var coords;
    coords = this.get_grid_coords();
    if (this.position.y === 425) {
      return false;
    } else if (coords.row === 8) {
      return true;
    }
    if (objects[coords.row + 1][coords.col].walkable) {
      return true;
    } else if (this.position.y !== this.on_snap_y()) {
      return true;
    } else {
      return false;
    }
  };

  Player.prototype.can_go_up = function() {
    var coords;
    coords = this.get_grid_coords();
    if (this.position.y === 25) {
      return false;
    } else if (coords.row === 0) {
      return true;
    }
    if (objects[coords.row - 1][coords.col].walkable) {
      return true;
    } else if (this.position.y !== this.on_snap_y()) {
      return true;
    } else {
      return false;
    }
  };

  Player.prototype.move_up = function(unit) {
    this.facing = 'up';
    this.position.y -= unit;
    if (!is_odd(this.position.y) && unit === 2) {
      return this.position.y -= 1;
    }
  };

  Player.prototype.move_down = function(unit) {
    this.facing = 'down';
    this.position.y += unit;
    if (!is_odd(this.position.y) && unit === 2) {
      return this.position.y += 1;
    }
  };

  Player.prototype.move_left = function(unit) {
    this.facing = 'left';
    this.position.x -= unit;
    if (!is_odd(this.position.x) && unit === 2) {
      return this.position.x -= 1;
    }
  };

  Player.prototype.move_right = function(unit) {
    this.facing = 'right';
    this.position.x += unit;
    if (!is_odd(this.position.x) && unit === 2) {
      return this.position.x += 1;
    }
  };

  return Player;

})();
