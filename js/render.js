// Generated by CoffeeScript 1.3.1
var clear_square, draw_player, init_draw, update_bomb, update_map;

init_draw = function() {
  var c_index, column, num, overlay, r_index, row, template, _i, _j, _len, _len1, _results;
  template = [1, 2, 3, 4, 5, 6, 7, 8];
  overlay = (function() {
    var _i, _len, _results;
    _results = [];
    for (_i = 0, _len = template.length; _i < _len; _i++) {
      num = template[_i];
      _results.push(num * 50);
    }
    return _results;
  })();
  for (_i = 0, _len = overlay.length; _i < _len; _i++) {
    num = overlay[_i];
    $('#overlay').drawLine({
      strokeStyle: "#cfcfcf",
      strokeWidth: 1,
      x1: num,
      y1: 0,
      x2: num,
      y2: 450
    });
    if (num <= 425) {
      $('#overlay').drawLine({
        strokeStyle: "#cfcfcf",
        strokeWidth: 1,
        x1: 0,
        y1: num,
        x2: 450,
        y2: num
      });
    }
  }
  _results = [];
  for (r_index = _j = 0, _len1 = objects.length; _j < _len1; r_index = ++_j) {
    row = objects[r_index];
    _results.push((function() {
      var _k, _len2, _results1;
      _results1 = [];
      for (c_index = _k = 0, _len2 = row.length; _k < _len2; c_index = ++_k) {
        column = row[c_index];
        _results1.push(update_map(r_index, c_index));
      }
      return _results1;
    })());
  }
  return _results;
};

draw_player = function() {
  var arc_end, arc_start, player, _i, _len, _results;
  $('#player').clearCanvas();
  _results = [];
  for (_i = 0, _len = players.length; _i < _len; _i++) {
    player = players[_i];
    $('#player').drawRect({
      fillStyle: '#fff',
      x: player.position.x,
      y: player.position.y,
      width: 25,
      height: 25,
      fromCenter: true,
      strokeStyle: '#000',
      strokeWidth: 1
    });
    if (player.facing === 'right') {
      arc_start = 45;
      arc_end = 135;
    } else if (player.facing === 'down') {
      arc_start = 135;
      arc_end = 225;
    } else if (player.facing === 'left') {
      arc_start = 225;
      arc_end = 315;
    } else if (player.facing === 'up') {
      arc_start = 315;
      arc_end = 45;
    }
    _results.push($('#player').drawArc({
      strokeStyle: "#000",
      strokeWidth: 1,
      x: player.position.x,
      y: player.position.y,
      radius: 18,
      start: arc_start,
      end: arc_end
    }));
  }
  return _results;
};

clear_square = function($layer, r, c) {
  var cartesian;
  cartesian = get_cartesian(r, c);
  $layer.clearCanvas({
    x: cartesian.x,
    y: cartesian.y,
    width: 50,
    height: 50
  });
  return {
    x: cartesian.x,
    y: cartesian.y
  };
};

update_bomb = function(r, c) {
  var cartesian, sq;
  cartesian = clear_square($('#bomb'), r, c);
  sq = objects[r][c];
  if (sq.type === 'explosion') {
    return $('#bomb').drawRect({
      fillStyle: '#f90c22',
      x: cartesian.x,
      y: cartesian.y,
      width: 50,
      height: 50,
      fromCenter: true
    });
  } else if (sq.type === 'bomb') {
    return $('#bomb').drawRect({
      fillStyle: '#0c9df9',
      x: cartesian.x,
      y: cartesian.y,
      width: 40,
      height: 40,
      fromCenter: true
    });
  }
};

update_map = function(r, c) {
  var cartesian, sq;
  cartesian = clear_square($('#map'), r, c);
  sq = objects[r][c];
  if (sq.type === 'stone') {
    return $('#map').drawRect({
      fillStyle: '#777777',
      x: cartesian.x,
      y: cartesian.y,
      width: 45,
      height: 45,
      fromCenter: true,
      cornerRadius: 10
    });
  } else if (sq.type === 'wood') {
    return $('#map').drawRect({
      fillStyle: '#593f00',
      x: cartesian.x,
      y: cartesian.y,
      width: 45,
      height: 45,
      fromCenter: true,
      cornerRadius: 10
    });
  } else if (sq.type === 'upgrade') {
    return $('#map').drawRect({
      fillStyle: '#ffad0f',
      x: cartesian.x,
      y: cartesian.y,
      width: 40,
      height: 40,
      fromCenter: true
    }).drawText({
      fillStyle: '#000',
      x: cartesian.x,
      y: cartesian.y,
      text: sq.kind.substring(0, 1),
      font: '12pt Helvetica, sans-serif'
    });
  }
};
